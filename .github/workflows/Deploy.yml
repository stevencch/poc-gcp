name: Deploy

env:
  NODE_VERSION: 22.x
  WORKLOAD_IDENTITY_PROVIDER: projects/1046924480273/locations/global/workloadIdentityPools/test-id-pool/providers/cwr-gcp-glb-oidc-ordrfmt
  SERVICE_ACCOUNT_EMAIL: sa-pool@poc-gcp-439306.iam.gserviceaccount.com
  TF_DIR: './terraform'
  TF_VAR_cwr_gcp_common_workspace: cwr-gcp-common-${{ github.base_ref || github.ref_name }}
on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: 'read'
  actions: 'read'
  id-token: 'write'
  pull-requests: 'write'

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get HCP API Token
        id: get-token
        run: |
          HCP_API_TOKEN=$(curl --location "https://auth.idp.hashicorp.com/oauth2/token" \
          --header "Content-Type: application/x-www-form-urlencoded" \
          --data-urlencode "client_id=${{ secrets.HCP_CLIENT_ID }}" \
          --data-urlencode "client_secret=${{ secrets.HCP_CLIENT_SECRET }}" \
          --data-urlencode "grant_type=client_credentials" \
          --data-urlencode "audience=https://api.hashicorp.cloud" | jq -r .access_token)
          echo "HCP_API_TOKEN=$HCP_API_TOKEN"
          echo "::set-output name=api_token::$HCP_API_TOKEN"

      - name: Retrieve Secret from HCP
        id: get-secret
        env:
          HCP_API_TOKEN: ${{ steps.get-token.outputs.api_token }}
        run: |
          SECRET_VALUE=$(curl \
          --location "https://api.cloud.hashicorp.com/secrets/2023-06-13/organizations/1da7c652-6f8c-4ccf-8ed3-f39b40027727/projects/146ca36c-81df-476d-b515-c46f81056e20/apps/sample-app/open/TF_API_TOKEN" \
          --request GET \
          --header "Authorization: Bearer $HCP_API_TOKEN" | jq -r .secret.version.value)
          echo "SECRET_VALUE=$SECRET_VALUE"
          echo "::set-output name=TF_API_TOKEN::$SECRET_VALUE"

      - name: Display Secret Value
        run: |
          echo "TF_API_TOKEN=${{ steps.get-secret.outputs.TF_API_TOKEN }}" >> $GITHUB_ENV
          echo "The retrieved secret is: $TF_API_TOKEN"
          echo "TF_VAR_gcp_project_id=poc-gcp-439306" >> $GITHUB_ENV

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          registry-url: https://npm.pkg.github.com
      - name: Install Dependencies
        run: npm ci

      - name: Build
        id: build
        run: npm run build:errorHandler
      # - name: Set up Google Auth
      #   id: auth
      #   uses: google-github-actions/auth@v2
      #   with:
      #     credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: Set up Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: set pwd
        run: |
          pw=$(pwd)
          echo "$pw"
          cd /home/runner/work/poc-gcp/poc-gcp/dist/apps/errorHandler
          tree
          echo "TF_VAR_code_path=$pw" >> $GITHUB_ENV
          
      - name: Print JSON content
        run: pwd

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_DIR }}

      - name: Print JSON content
        run: cat "$GOOGLE_GHA_CREDS_PATH"

      - name: Terraform Apply artifact registry
        id: apply_artifact_registry
        run: terraform apply --auto-approve -no-color -target="module.artifact_registry"
        working-directory: ${{ env.TF_DIR }}

      - name: Extract artifact registry repo id
        id: extract_registry_repo_id
        run: |
          repository_id=$(terraform output -no-color -json artifact_registry_repository_id | jq -r '.')
          echo "REPOSITORY_ID=$repository_id" >> "$GITHUB_OUTPUT"
        working-directory: ${{ env.TF_DIR }}

      - name: Get last succesful commit id
        uses: actions/github-script@v7
        id: last_successful_commit
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { data: result } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'Deploy.yml',
              branch: 'main',
              status: 'success',
              per_page: 1
            });
            if (!result || result.total_count == 0)
              return null;
            else
              return result.workflow_runs[0].head_sha;


      - name: Build and Push Docker Images and identify image tags
        env:
          GCP_ARTIFACT_REGISTRY_REPOSITORY_ID: ${{ steps.extract_registry_repo_id.outputs.REPOSITORY_ID }}
          LAST_SUCCESSFUL_COMMIT: ${{ steps.last_successful_commit.outputs.result }}
        run: |
          chmod +x ./deploy/build-push-docker.sh
          ./deploy/build-push-docker.sh


      


      # - name: Print folders
      #   run: cat "$GOOGLE_GHA_CREDS_PATH"

      # - name: Print JSON content
      #   run: find . -type d
        


      - name: Terraform Apply all
        id: apply
        env:
          TF_VAR_hpc_client_id: ${{secrets.HCP_CLIENT_ID}}
          TF_VAR_hpc_client_secret: ${{secrets.HCP_CLIENT_SECRET}}
        run: terraform apply --auto-approve -no-color --var-file=project_images.tfvars
        working-directory: ${{ env.TF_DIR }}
      # # This enables task distribution via Nx Cloud
      # # Run this command as early as possible, before dependencies are installed
      # # Learn more at https://nx.dev/ci/reference/nx-cloud-cli#npx-nxcloud-startcirun
      # # - run: npx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      # # Cache node_modules
      # - uses: actions/setup-node@v4
      #   with:
      #     node-version: 20
      #     cache: 'npm'

      # - run: npm ci --legacy-peer-deps
      # - uses: nrwl/nx-set-shas@v4

      # # Prepend any command with "nx-cloud record --" to record its logs to Nx Cloud
      # # - run: npx nx-cloud record -- echo Hello World
      # # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      # - run: npx nx affected -t lint test build
